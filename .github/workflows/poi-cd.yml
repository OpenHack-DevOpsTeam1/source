# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions. 
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: poi - cd
env:
  AZURE_WEBAPP_NAME: openhackyvs74zq0poi
  BASEIMAGETAG: ${{github.sha}}
  ACRNAME: openhackyvs74zq0acr
  GITOHTEAMDIRPATH: .
  RESOURCE_GROUP: openhackyvs74zq0rg
on:
  push:
    branches:
      #- $default-branch
      - main
    paths: 
      - 'apis/poi/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Build and push container to ACR
        run: |
          echo "Building API-POI image..."
          echo "Changing directory to $GITOHTEAMDIRPATH/apis/poi/web..."
          cd "$GITOHTEAMDIRPATH/apis/poi/web"
          az acr build --image "devopsoh/api-poi:${BASEIMAGETAG}" --registry $ACRNAME --file Dockerfile .
      
#<Azure Container Registry URI>/<ACR_repository_name>:<Revision Number> where the ACR_repository_name follows the naming convention devopsoh/<image_name>:<tag>.
#openhackyvs74zq0acr.azurecr.io/devopsoh/api-poi:

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Debug'
      run: |
          echo "Deploying ${{ env.ACRNAME }}/devopsoh/api-poi:${{ env.BASEIMAGETAG }}"
    - name: 'Deploy to Azure Web App for Container'
      id: deploy-staging
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }} 
        images: openhackyvs74zq0acr.azurecr.io/devopsoh/api-poi:${{ env.BASEIMAGETAG }}
        slot-name: 'staging'
    # check
    - uses: actions/checkout@v2
    - name: 'Check staging deployment is successful'
      run: |
        echo "Running polling.sh from $GITOHTEAMDIRPATH/resources/polling.sh"
        cd "$GITOHTEAMDIRPATH/resources"
        # make file runnable
        chmod +x "./polling.sh"
        ./polling.sh "${{ steps.deploy-staging.outputs.webapp-url }}/api/healthcheck/poi" 90
      shell: bash
    # if successful swap stage to prod
    - name: 'Swap web app deployment slots for blue/green'
      id: swap-to-prod
      run: |
        az webapp deployment slot swap -g  -n ${{ env.AZURE_WEBAPP_NAME }} --slot staging --target-slot production
    
