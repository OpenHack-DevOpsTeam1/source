# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions. 
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: (UserProfile) Build and deploy a container to an Azure Web App

env:
  AZURE_WEBAPP_NAME: openhackyvs74zq0userprofile
  BASEIMAGETAG: ${{github.sha}}
  ACRNAME: openhackyvs74zq0acr
  ACR_REPOSITORY: devopsoh/api-userprofile
  GITOHTEAMDIRPATH: .
  PROJECTNAME: userprofile
on:
  push:
    branches:
      - $default-branch
    paths: 
      - 'apis/${{ env.PROJECTNAME }}/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Build and push container to ACR
        run: |
          echo "Building USERPROFILE image..."
          echo "Changing directory to $GITOHTEAMDIRPATH/apis/${PROJECTNAME}/..."
          cd "$GITOHTEAMDIRPATH/apis/${PROJECTNAME}/"
          az acr build --image "${ACR_REPOSITORY}:${BASEIMAGETAG}" --registry $ACRNAME --file Dockerfile .
      
#<Azure Container Registry URI>/<ACR_repository_name>:<Revision Number> where the ACR_repository_name follows the naming convention devopsoh/<image_name>:<tag>.
#openhackyvs74zq0acr.azurecr.io/devopsoh/api-poi:

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      #url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Debug'
      run: |
          echo "Deploying ${{ env.ACRNAME }}/${{ env.ACR_REPOSITORY}}:${{ env.BASEIMAGETAG }}"
    - name: 'Deploy to Azure Web App for Container'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }} 
        images: ${{ env.ACRNAME }}/${{ env.ACR_REPOSITORY }}:${{ env.BASEIMAGETAG }}
#         startup-command: 'npm start'    # Include start up command to start the app container
  
